import os, json, logging, threading, time
from datetime import datetime
from zoneinfo import ZoneInfo

from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    ConversationHandler, MessageHandler, ContextTypes, filters,
)

# ---------- –õ–û–ì–ò ----------
logging.basicConfig(
    format="%(asctime)s %(name)s [%(levelname)s] %(message)s",
    level=logging.INFO,
)
log = logging.getLogger("bot")

# ---------- –ù–ê–°–¢–†–û–ô–ö–ò ----------
load_dotenv()  # –ª–æ–∫–∞–ª—å–Ω–æ –≤–æ–∑—å–º—ë—Ç –∏–∑ .env; –Ω–∞ Render –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—é—Ç—Å—è –≤ –ø–∞–Ω–µ–ª–∏

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TELEGRAM_TOKEN:
    raise RuntimeError("–ù–µ—Ç TELEGRAM_TOKEN –≤ .env/–ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

# —Ç–≤–æ–π (–≤–∞—à) Telegram ID ‚Äî —É–∫–∞–∂–∏ –∑–¥–µ—Å—å:
ADMIN_IDS = {981248855}  # <-- –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π numeric ID

NUM_SECTIONS = 7
DATA_FILE = "data.json"

# –†–∞–±–æ—á–∏–µ —á–∞—Å—ã / –∑–æ–Ω–∞
WORK_TZ = os.getenv("WORK_TZ", "Europe/Paris")
WORK_START = int(os.getenv("WORK_START", "6"))   # –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 06:00
WORK_END   = int(os.getenv("WORK_END",   "22"))  # –∏—Å–∫–ª—é—á–∞—è, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 22:00
OFF_MSG = os.getenv(
    "OFF_MSG",
    "‚è∞ –ë–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è: 06:00‚Äì22:00 (Europe/Paris). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
)
ADMIN_BYPASS = os.getenv("ADMIN_BYPASS", "1") in {"1", "true", "True"}  # –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ—á—å—é

# Keep-alive (—Å–∞–º–æ–ø–∏–Ω–≥) ‚Äî –∑–∞–¥–∞–π URL —Å–µ—Ä–≤–∏—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://my-bot.onrender.com/)
KEEPALIVE_URL = os.getenv("KEEPALIVE_URL", "").strip()
KEEPALIVE_EVERY_SEC = int(os.getenv("KEEPALIVE_EVERY_SEC", "300"))  # –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

# ---------- –ú–ò–ù–ò HTTP-–°–ï–†–í–ï–† –î–õ–Ø RENDER ----------
# Render –∂–¥—ë—Ç, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç $PORT.
from flask import Flask
app_http = Flask(__name__)

@app_http.get("/")
def health():
    return "ok", 200

def run_http():
    port = int(os.environ.get("PORT", 10000))
    app_http.run(host="0.0.0.0", port=port)

def keepalive_loop():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø–∏–Ω–∞–µ–º –≤–Ω–µ—à–Ω–∏–π URL, —á—Ç–æ–±—ã —Ö–æ—Å—Ç–∏–Ω–≥ –Ω–µ —É—Å—ã–ø–ª—è–ª —Å–µ—Ä–≤–∏—Å."""
    if not KEEPALIVE_URL:
        log.info("KEEPALIVE_URL –Ω–µ –∑–∞–¥–∞–Ω ‚Äî —Å–∞–º–æ–ø–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω.")
        return
    import requests
    log.info("–ó–∞–ø—É—â–µ–Ω keepalive-–ø–∏–Ω–≥: %s, –∫–∞–∂–¥—ã–µ %s —Å–µ–∫", KEEPALIVE_URL, KEEPALIVE_EVERY_SEC)
    while True:
        try:
            requests.get(KEEPALIVE_URL, timeout=10)
        except Exception as e:
            log.warning("Keepalive error: %s", e)
        time.sleep(KEEPALIVE_EVERY_SEC)

# ---------- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï: –í–†–ï–ú–Ø –†–ê–ë–û–¢–´ ----------
def is_admin(uid: int) -> bool:
    return uid in ADMIN_IDS

def is_work_time(dt: datetime | None = None) -> bool:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —Å–µ–π—á–∞—Å –≤–Ω—É—Ç—Ä–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ [WORK_START, WORK_END)."""
    tz = ZoneInfo(WORK_TZ)
    now = dt or datetime.now(tz)
    h = now.hour
    # –ø–æ–¥–¥–µ—Ä–∂–∫–∞ ¬´–ø–µ—Ä–µ–ª–æ–º–∞ —Å—É—Ç–æ–∫¬ª, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –∫—Ç–æ-—Ç–æ –∑–∞—Ö–æ—á–µ—Ç END < START
    if WORK_START <= WORK_END:
        return WORK_START <= h < WORK_END
    else:
        # –Ω–∞–ø—Ä. 22..24 –∏ 0..6
        return h >= WORK_START or h < WORK_END

async def guard_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """–ü—É—Å–∫–∞—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π."""
    uid = update.effective_user.id if update.effective_user else 0
    if is_work_time() or (ADMIN_BYPASS and is_admin(uid)):
        return True
    await update.message.reply_text(OFF_MSG)
    return False

async def guard_callback(q, uid: int) -> bool:
    """–ü—É—Å–∫–∞—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∫–Ω–æ–ø–æ–∫."""
    if is_work_time() or (ADMIN_BYPASS and is_admin(uid)):
        return True
    await q.answer(OFF_MSG, show_alert=True)
    return False

# ---------- –°–û–°–¢–û–Ø–ù–ò–Ø –î–ò–ê–õ–û–ì–ê ----------
(
    CHOOSING_SECTION,
    SECTION_ACTION,
    EDIT_SECTION_TEXT,
    CHOOSE_SUB_FOR_EDIT,
    EDIT_SUB_TEXT,
    ADD_SUB_TITLE,
    ADD_SUB_TEXT,
    CHOOSE_SUB_FOR_DELETE,
    CONFIRM_DELETE_SUB,
) = range(9)

# ---------- –•–†–ê–ù–ò–õ–ò–©–ï ----------
def save_data(data: dict):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def load_data() -> dict:
    if not os.path.exists(DATA_FILE):
        titles = {
            "1": "üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã",
            "2": "üìå –í –≤–∞–∂–Ω–æ–µ",
            "3": "üìÅ –î–æ–∫—É–º–µ–Ω—Ç—ã –î–µ–Ω–∏—Å–∞",
            "4": "üëã –ú–æ–π –í–∞–º –ø—Ä–∏–≤–µ—Ç",
            "5": "–ö—É–ö—É",
            "6": "–°–º–µ—à–Ω—ã–µ –ò—Å—Ç–æ—Ä–∏–∏",
            "7": "–≠—Ä–æ—Ç–∏–∫–∞",
        }
        texts = {str(i): "" for i in range(1, NUM_SECTIONS + 1)}
        data = {"titles": titles, "texts": texts, "subsections": {}}
        save_data(data)
        return data
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        data = json.load(f)
    data.setdefault("subsections", {})
    return data

DATA = load_data()

# ---------- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ö–õ–ê–í–ò–ê–¢–£–†–´ ----------
def sections_keyboard():
    rows = [[InlineKeyboardButton(f'{sid}. {DATA["titles"][sid]}', callback_data=f"sec:{sid}")]
            for sid in sorted(DATA["titles"], key=lambda x: int(x))]
    rows.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    return InlineKeyboardMarkup(rows)

def section_actions_keyboard(sec_id: str):
    rows = [
        [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç —Ä–∞–∑–¥–µ–ª–∞", callback_data=f"act:set_text:{sec_id}")],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª", callback_data=f"act:add_sub:{sec_id}")],
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª", callback_data=f"act:edit_sub:{sec_id}")],
        [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª", callback_data=f"act:del_sub:{sec_id}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ö —Ä–∞–∑–¥–µ–ª–∞–º", callback_data="back:sections"),
         InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")],
    ]
    return InlineKeyboardMarkup(rows)

def subs_keyboard(sec_id: str, mode: str):
    subs = DATA["subsections"].get(sec_id, {})
    rows = [[InlineKeyboardButton(f'{sub_id}. {item["title"]}', callback_data=f"{mode}:{sec_id}:{sub_id}")]
            for sub_id, item in sorted(subs.items(), key=lambda x: int(x[0]))]
    if not rows:
        rows = [[InlineKeyboardButton("–ü–æ–¥—Ä–∞–∑–¥–µ–ª–æ–≤ –Ω–µ—Ç", callback_data="noop")]]
    rows.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"act_menu:{sec_id}")])
    return InlineKeyboardMarkup(rows)

def next_sub_id(sec_id: str) -> str:
    subs = DATA["subsections"].get(sec_id, {})
    return str(1 + max([int(i) for i in subs.keys()] or [0]))

# ---------- –ü–£–ë–õ–ò–ß–ù–û–ï –ú–ï–ù–Æ ----------
def public_sections_keyboard():
    return InlineKeyboardMarkup(
        [[InlineKeyboardButton(f'{sid}. {DATA["titles"][sid]}', callback_data=f"vsec:{sid}")]
         for sid in sorted(DATA["titles"], key=lambda x: int(x))]
    )

def public_subs_keyboard(sec_id: str):
    subs = DATA["subsections"].get(sec_id, {})
    if not subs:
        return InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", callback_data="vback")]])
    rows = [[InlineKeyboardButton(item["title"], callback_data=f"vsub:{sec_id}:{sub_id}")]
            for sub_id, item in sorted(subs.items(), key=lambda x: int(x[0]))]
    rows.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", callback_data="vback")])
    return InlineKeyboardMarkup(rows)

# ---------- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –í–°–ï–• ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await guard_message(update, context):
        return
    text = "–ú–µ–Ω—é –±–æ—Ç–∞: –≤—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª."
    if is_admin(update.effective_user.id):
        text += "\n\n‚öôÔ∏è –ê–¥–º–∏–Ω—É: –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π /manage."
    await update.message.reply_text(text, reply_markup=public_sections_keyboard())

async def public_view_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    uid = q.from_user.id
    if not await guard_callback(q, uid):
        return
    data = q.data or ""
    await q.answer()

    if data == "vback":
        await q.edit_message_text("–ú–µ–Ω—é –±–æ—Ç–∞: –≤—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª.", reply_markup=public_sections_keyboard()); return
    if data.startswith("vsec:"):
        sec_id = data.split(":")[1]
        title = DATA["titles"].get(sec_id, f"–†–∞–∑–¥–µ–ª {sec_id}")
        text = DATA["texts"].get(sec_id, "") or "‚Äî"
        await q.edit_message_text(f"*{title}*\n\n{text}", parse_mode="Markdown",
                                  reply_markup=public_subs_keyboard(sec_id)); return
    if data.startswith("vsub:"):
        _, sec_id, sub_id = data.split(":")
        item = DATA["subsections"].get(sec_id, {}).get(sub_id)
        if not item:
            await q.answer("–ü–æ–¥—Ä–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True); return
        back = InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–∞–∑–¥–µ–ª—É", callback_data=f"vsec:{sec_id}")]])
        await q.edit_message_text(f"*{item['title']}*\n\n{item.get('text','‚Äî')}", parse_mode="Markdown", reply_markup=back); return

# ---------- –ê–î–ú–ò–ù-–†–ï–ñ–ò–ú (/manage) ----------
async def manage(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return ConversationHandler.END
    # –ê–¥–º–∏–Ω –Ω–æ—á—å—é –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è, –µ—Å–ª–∏ ADMIN_BYPASS = true
    if not is_work_time() and not ADMIN_BYPASS:
        await update.message.reply_text(OFF_MSG)
        return ConversationHandler.END
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=sections_keyboard())
    return CHOOSING_SECTION

async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    uid = q.from_user.id
    # –†–∞–∑—Ä–µ—à–∞–µ–º –∞–¥–º–∏–Ω—É –Ω–æ—á—å—é (–µ—Å–ª–∏ ADMIN_BYPASS=1)
    if not (is_work_time() or (ADMIN_BYPASS and is_admin(uid))):
        await q.answer(OFF_MSG, show_alert=True)
        return ConversationHandler.END

    data = q.data or ""
    await q.answer()

    if data == "cancel":
        await q.edit_message_text("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."); return ConversationHandler.END
    if data == "noop": return
    if data == "back:sections":
        await q.edit_message_text("–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:", reply_markup=sections_keyboard()); return CHOOSING_SECTION

    if data.startswith("sec:"):
        sec_id = data.split(":")[1]; context.user_data["sec_id"] = sec_id
        title = DATA["titles"].get(sec_id, f"–†–∞–∑–¥–µ–ª {sec_id}")
        text = DATA["texts"].get(sec_id, "") or "–¢–µ–∫—Å—Ç –ø—É—Å—Ç"
        await q.edit_message_text(f"**{title}**\n\n{text}", parse_mode="Markdown",
                                  reply_markup=section_actions_keyboard(sec_id)); return SECTION_ACTION

    if data.startswith("act_menu:"):
        sec_id = data.split(":")[1]
        await q.edit_message_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=section_actions_keyboard(sec_id)); return SECTION_ACTION

    if data.startswith("act:set_text:"):
        sec_id = data.split(":")[2]; context.user_data["sec_id"] = sec_id
        await q.edit_message_text("–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞. –î–ª—è –æ—Ç–º–µ–Ω—ã ‚Äî /cancel"); return EDIT_SECTION_TEXT

    if data.startswith("act:add_sub:"):
        sec_id = data.split(":")[2]; context.user_data["sec_id"] = sec_id
        await q.edit_message_text("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞:"); return ADD_SUB_TITLE

    if data.startswith("act:edit_sub:"):
        sec_id = data.split(":")[2]; context.user_data["sec_id"] = sec_id
        await q.edit_message_reply_markup(reply_markup=subs_keyboard(sec_id, "pick_edit")); return CHOOSE_SUB_FOR_EDIT

    if data.startswith("act:del_sub:"):
        sec_id = data.split(":")[2]; context.user_data["sec_id"] = sec_id
        await q.edit_message_reply_markup(reply_markup=subs_keyboard(sec_id, "pick_del")); return CHOOSE_SUB_FOR_DELETE

    if data.startswith("pick_edit:"):
        _, sec_id, sub_id = data.split(":")
        context.user_data["sec_id"] = sec_id; context.user_data["sub_id"] = sub_id
        sub = DATA["subsections"][sec_id][sub_id]
        await q.edit_message_text(f'–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ **{sub["title"]}**.\n–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç (–∏–ª–∏ /cancel).',
                                  parse_mode="Markdown"); return EDIT_SUB_TEXT

    if data.startswith("pick_del:"):
        _, sec_id, sub_id = data.split(":")
        context.user_data["sec_id"] = sec_id; context.user_data["sub_id"] = sub_id
        sub = DATA["subsections"].get(sec_id, {}).get(sub_id)
        if not sub:
            await q.edit_message_text("–ü–æ–¥—Ä–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=section_actions_keyboard(sec_id)); return SECTION_ACTION
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("‚úÖ –£–¥–∞–ª–∏—Ç—å", callback_data="confirm_del"),
                                    InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"act_menu:{sec_id}")]])
        await q.edit_message_text(f'–£–¥–∞–ª–∏—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª **{sub["title"]}**?', parse_mode="Markdown", reply_markup=kb); return CONFIRM_DELETE_SUB

    if data == "confirm_del":
        sec_id = context.user_data.get("sec_id"); sub_id = context.user_data.get("sub_id")
        try:
            del DATA["subsections"][sec_id][sub_id]
            if not DATA["subsections"][sec_id]: del DATA["subsections"][sec_id]
            save_data(DATA)
            await q.edit_message_text("–ü–æ–¥—Ä–∞–∑–¥–µ–ª —É–¥–∞–ª—ë–Ω.", reply_markup=section_actions_keyboard(sec_id)); return SECTION_ACTION
        except KeyError:
            await q.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å (—É–∂–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç).", reply_markup=section_actions_keyboard(sec_id)); return SECTION_ACTION

async def set_section_text_msg(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return ConversationHandler.END
    if not is_work_time() and not ADMIN_BYPASS:
        await update.message.reply_text(OFF_MSG); return ConversationHandler.END
    sec_id = context.user_data.get("sec_id")
    DATA["texts"][sec_id] = update.message.text; save_data(DATA)
    await update.message.reply_text("–¢–µ–∫—Å—Ç —Ä–∞–∑–¥–µ–ª–∞ –æ–±–Ω–æ–≤–ª—ë–Ω.", reply_markup=section_actions_keyboard(sec_id)); return SECTION_ACTION

async def add_sub_title_msg(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return ConversationHandler.END
    if not is_work_time() and not ADMIN_BYPASS:
        await update.message.reply_text(OFF_MSG); return ConversationHandler.END
    context.user_data["new_sub_title"] = update.message.text.strip()
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞:"); return ADD_SUB_TEXT

async def add_sub_text_msg(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return ConversationHandler.END
    if not is_work_time() and not ADMIN_BYPASS:
        await update.message.reply_text(OFF_MSG); return ConversationHandler.END
    sec_id = context.user_data.get("sec_id"); sub_id = next_sub_id(sec_id)
    DATA.setdefault("subsections", {}).setdefault(sec_id, {})
    DATA["subsections"][sec_id][sub_id] = {"title": context.user_data["new_sub_title"], "text": update.message.text}
    save_data(DATA)
    await update.message.reply_text(f'–ü–æ–¥—Ä–∞–∑–¥–µ–ª –¥–æ–±–∞–≤–ª–µ–Ω: {sub_id}. {context.user_data["new_sub_title"]}',
                                    reply_markup=section_actions_keyboard(sec_id))
    context.user_data.pop("new_sub_title", None); return SECTION_ACTION

async def edit_sub_text_msg(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return ConversationHandler.END
    if not is_work_time() and not ADMIN_BYPASS:
        await update.message.reply_text(OFF_MSG); return ConversationHandler.END
    sec_id = context.user_data.get("sec_id"); sub_id = context.user_data.get("sub_id")
    DATA["subsections"][sec_id][sub_id]["text"] = update.message.text; save_data(DATA)
    await update.message.reply_text("–¢–µ–∫—Å—Ç –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞ –æ–±–Ω–æ–≤–ª—ë–Ω.", reply_markup=section_actions_keyboard(sec_id)); return SECTION_ACTION

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ."); return ConversationHandler.END

# ---------- –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ò –ó–ê–ü–£–°–ö ----------
def main():
    # HTTP + keepalive –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö
    threading.Thread(target=run_http, daemon=True).start()
    if KEEPALIVE_URL:
        threading.Thread(target=keepalive_loop, daemon=True).start()

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    # –ü—É–±–ª–∏—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã/–∫–Ω–æ–ø–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", start))
    app.add_handler(CallbackQueryHandler(public_view_cb, pattern="^v"))  # vsec/vsub/vback

    # –ê–¥–º–∏–Ω-–¥–∏–∞–ª–æ–≥
    manage_conv = ConversationHandler(
        entry_points=[CommandHandler("manage", manage)],
        states={
            CHOOSING_SECTION: [CallbackQueryHandler(on_callback)],
            SECTION_ACTION: [CallbackQueryHandler(on_callback)],
            EDIT_SECTION_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_section_text_msg),
                                CallbackQueryHandler(on_callback)],
            ADD_SUB_TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_sub_title_msg),
                            CallbackQueryHandler(on_callback)],
            ADD_SUB_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_sub_text_msg),
                           CallbackQueryHandler(on_callback)],
            CHOOSE_SUB_FOR_EDIT: [CallbackQueryHandler(on_callback)],
            EDIT_SUB_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_sub_text_msg),
                            CallbackQueryHandler(on_callback)],
            CHOOSE_SUB_FOR_DELETE: [CallbackQueryHandler(on_callback)],
            CONFIRM_DELETE_SUB: [CallbackQueryHandler(on_callback)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True,
    )
    app.add_handler(manage_conv)

    log.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è‚Ä¶ –†–∞–±–æ—á–∏–µ —á–∞—Å—ã %02d:00‚Äì%02d:00, TZ=%s (–∞–¥–º–∏–Ω –Ω–æ—á—å—é: %s)",
             WORK_START, WORK_END, WORK_TZ, ADMIN_BYPASS)
    app.run_polling(close_loop=False)

if __name__ == "__main__":
    main()
